openapi: 3.0.3
info:
  title: "QuickMenu"
  description: This is a place where sellers and buyers meat each other
  version: 1.0.0
servers:
  - url: http://localhost:8080/v1

tags:
  - name: goods
    description: Блюдо(продукт)
  - name: order
    description: Список заказов

paths:
  /goods/create:
    post:
      tags:
        - goods
      summary: Create goods
      operationId: goodsCreate
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoodsCreateRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoodsCreateResponse'
  /goods/read:
    post:
      tags:
        - goods
      summary: Read goods
      operationId: goodsRead
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoodsReadRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoodsReadResponse'
  /goods/update:
    post:
      tags:
        - goods
      summary: Update goods
      operationId: goodsUpdate
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoodsUpdateRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoodsUpdateResponse'
  /goods/delete:
    post:
      tags:
        - goods
      summary: Delete goods
      operationId: goodsDelete
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoodsDeleteRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoodsDeleteResponse'
  /goods/search:
    post:
      tags:
        - goods
      summary: Search goods
      operationId: goodsSearch
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoodsSearchRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoodsSearchResponse'

  /order/create:
    post:
      tags:
        - order
      summary: Create order
      operationId: orderCreate
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreateRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCreateResponse'
  /order/read:
    post:
      tags:
        - order
      summary: Read order
      operationId: orderRead
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderReadRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderReadResponse'
  /order/update:
    post:
      tags:
        - order
      summary: Update order
      operationId: orderUpdate
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderUpdateRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderUpdateResponse'
  /order/delete:
    post:
      tags:
        - order
      summary: Delete order
      operationId: orderDelete
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDeleteRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDeleteResponse'
  /order/search:
    post:
      tags:
        - order
      summary: Search order
      operationId: orderSearch
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderSearchRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderSearchResponse'


components:
  schemas:
    IRequest:
      type: object
      description: Базовый интерфейс для всех запросов
      properties:
        requestType:
          type: string
          description: Поле с информацией о типе запроса
          example: create
        requestId:
          type: string
          description: Идентификатор запроса для отладки
      discriminator:
        propertyName: requestType
        mapping:
          goodsCreate: '#/components/schemas/GoodsCreateRequest'
          goodsRead: '#/components/schemas/GoodsReadRequest'
          goodsUpdate: '#/components/schemas/GoodsUpdateRequest'
          goodsDelete: '#/components/schemas/GoodsDeleteRequest'
          goodsSearch: '#/components/schemas/GoodsSearchRequest'
          orderCreate: '#/components/schemas/OrderCreateRequest'
          orderRead: '#/components/schemas/OrderReadRequest'
          orderUpdate: '#/components/schemas/OrderUpdateRequest'
          orderDelete: '#/components/schemas/OrderDeleteRequest'
          orderSearch: '#/components/schemas/OrderSearchRequest'

    Error:
      type: object
      properties:
        code:
          type: string
        group:
          type: string
        field:
          type: string
        message:
          type: string

    ResponseResult:
      type: string
      enum:
        - success
        - error

    IResponse:
      type: object
      description: Базовый интерфейс для всех ответов
      properties:
        responseType:
          type: string
          description: Поле-дескриминатор для вычисления типа запроса
          example: create
        requestId:
          type: string
          description: Идентификатор запроса для отладки
        result:
          $ref: '#/components/schemas/ResponseResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
      discriminator:
        propertyName: responseType
        mapping:
          goodsCreate: '#/components/schemas/GoodsCreateResponse'
          goodsRead: '#/components/schemas/GoodsReadResponse'
          goodsUpdate: '#/components/schemas/GoodsUpdateResponse'
          goodsDelete: '#/components/schemas/GoodsDeleteResponse'
          goodsSearch: '#/components/schemas/GoodsSearchResponse'
          orderCreate: '#/components/schemas/OrderCreateResponse'
          orderRead: '#/components/schemas/OrderReadResponse'
          orderUpdate: '#/components/schemas/OrderUpdateResponse'
          orderDelete: '#/components/schemas/OrderDeleteResponse'
          orderSearch: '#/components/schemas/OrderSearchResponse'

    GoodsId:
      type: string
      description: Идентификатор продукта
      example: 3
    OrderId:
      type: string
      description: Идентификатор списка заказа
      example: 10
    BuyerId:
      type: string
      description: Идентификатор покупателя
      example: 100


    BaseGoods:
      type: object
      description: Объект описывает свойства, одинаковые для create и update
      properties:
        name:
          type: string
          description: Название блюда
          example: "Пицца четыре сыра"
        type:
          $ref: '#/components/schemas/GoodsType'
        price:
          type: string
          description: Стоимость блюда
          example: 500
        weight:
          type: string
          description: Вес блюда
          example: "500 гр"

    GoodsType:
      type: string
      description: 'Тип блюда'
      enum:
        - salad
        - snack
        - soup
        - pizza
      example: pizza

    GoodsCreateObject:
      allOf:
        - $ref: '#/components/schemas/BaseGoods'

    GoodsIdObject:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/GoodsId'

    GoodsCreateRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/GoodsRequestDebug'
        - type: object
          properties:
            goods:
              $ref: '#/components/schemas/GoodsCreateObject'

    GoodsReadRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/GoodsRequestDebug'
        - $ref: '#/components/schemas/GoodsIdObject'

    GoodsUpdateObject:
      allOf:
        - $ref: '#/components/schemas/BaseGoods'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/GoodsId'

    GoodsUpdateRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/GoodsRequestDebug'
        - type: object
          properties:
            goods:
              $ref: '#/components/schemas/GoodsUpdateObject'


    GoodsDeleteRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/GoodsRequestDebug'
        - $ref: '#/components/schemas/GoodsIdObject'

    GoodsSearchFilter:
      type: object
      description: Набор фильтров для поиска
      properties:
        nameSearch:
          type: string
          description: Поиск по названию блюда
        type:
          $ref: '#/components/schemas/GoodsType'

    GoodsSearchRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/GoodsRequestDebug'
        - type: object
          properties:
            goodsFilter:
              $ref: '#/components/schemas/GoodsSearchFilter'

    BaseGoodsOrder:
      type: object
      description: Объект описывает свойства, одинаковые для create и update
      properties:
        name:
          type: string
          description: Название блюда
          example: "Пицца Четыре сыра"
        price:
          type: string
          description: Стоимость блюда
          example: 500
        count:
          type: string
          description: Количество продукта
          example: 3

    OrderGoodsObject:
      allOf:
        - type: object
          properties:
            buyerId:
              $ref: '#/components/schemas/BuyerId'
            goods:
              $ref: '#/components/schemas/BaseGoodsOrder'

    OrderCreateRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/OrderRequestDebug'
        - type: object
          properties:
            order:
               $ref: '#/components/schemas/OrderGoodsObject'

    OrderIdObject:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/OrderId'

    OrderReadRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/OrderRequestDebug'
        - type: object
          properties:
            order:
              $ref: '#/components/schemas/OrderIdObject'


    OrderGoodsWithIdObject:
      allOf:
        - $ref: '#/components/schemas/GoodsIdObject'
        - $ref: '#/components/schemas/BaseGoodsOrder'


    OrderUpdateObject:
      allOf:
        - $ref: '#/components/schemas/OrderIdObject'
        - type: object
          properties:
            goods_list:
              type: array
              items:
                $ref: '#/components/schemas/OrderGoodsWithIdObject'


    OrderUpdateRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/OrderRequestDebug'
        - type: object
          properties:
            order:
              $ref: '#/components/schemas/OrderUpdateObject'

    OrderDeleteRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/OrderRequestDebug'
        - type: object
          properties:
            order:
              $ref: '#/components/schemas/OrderIdObject'

    OrderSearchFilter:
      type: object
      description: Набор фильтров для поиска
      properties:
        date_from:
          type: string
          format: date-time
          example: "2023-07-20T15:30:00Z"
        date_to:
          type: string
          format: date-time
          example: "2023-07-20T16:30:00Z"
        buyerId:
          type: string
          example: "3214"

    OrderSearchRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/OrderRequestDebug'
        - type: object
          properties:
            goodsFilter:
              $ref: '#/components/schemas/OrderSearchFilter'

    # Response


    GoodsResponseObject:
      allOf:
        - $ref: '#/components/schemas/GoodsUpdateObject'



    GoodsResponseSingle:
      allOf:
        - type: object
          description: Ответ с одним объектом объявления
          properties:
            goods:
              $ref: '#/components/schemas/GoodsResponseObject'

    GoodsResponseMulti:
      allOf:
        - type: object
          description: Список найденных объектов
          properties:
            goods_list:
              type: array
              items:
                $ref: '#/components/schemas/GoodsResponseObject'

    OrderResponseObject:
      allOf:
        - $ref: '#/components/schemas/OrderUpdateObject'
        - type: object
          description: Объект, который возвращается в ответе бэкенда
          properties:
            createDate:
              type: string
              format: date-time
              example: "2023-07-20T16:30:00Z"
            totalPrice:
              type: string
              format: int64
              example: 10000
            buyerId:
              $ref: '#/components/schemas/BuyerId'



    OrderResponseSingle:
      allOf:
        - type: object
          description: Ответ с одним объектом объявления
          properties:
            order:
              $ref: '#/components/schemas/OrderResponseObject'

    OrderResponseMulti:
      allOf:
        - type: object
          description: Список найденных объектов
          properties:
            order_list:
              type: array
              items:
                $ref: '#/components/schemas/OrderResponseObject'



    GoodsCreateResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/GoodsResponseSingle'

    GoodsReadResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/GoodsResponseSingle'

    GoodsUpdateResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/GoodsResponseSingle'

    GoodsDeleteResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/GoodsResponseSingle'

    GoodsSearchResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/GoodsResponseMulti'


    OrderCreateResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/OrderResponseSingle'

    OrderReadResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/OrderResponseSingle'

    OrderUpdateResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/OrderResponseSingle'

    OrderDeleteResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/OrderResponseSingle'

    OrderSearchResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/OrderResponseMulti'

    #/components/schemas/ STUBS ======================
    RequestDebugMode:
      type: string
      enum:
        - prod
        - test
        - stub

    GoodsRequestDebug:
      type: object
      properties:
        debug:
          $ref: '#/components/schemas/GoodsDebug'

    OrderRequestDebug:
      type: object
      properties:
        debug:
          $ref: '#/components/schemas/OrderDebug'

    GoodsDebug:
      type: object
      properties:
        mode:
          $ref: '#/components/schemas/RequestDebugMode'
        stub:
          $ref: '#/components/schemas/GoodsRequestDebugStubs'

    OrderDebug:
      type: object
      properties:
        mode:
          $ref: '#/components/schemas/RequestDebugMode'
        stub:
          $ref: '#/components/schemas/OrderRequestDebugStubs'

    GoodsRequestDebugStubs:
      type: string
      description: Перечисления всех стабов
      enum:
        - success
        - notFound
        - badId
        - badName
        - badType
        - badPrice
        - cannotDelete
        - badSearchString

    OrderRequestDebugStubs:
      type: string
      description: Перечисления всех стабов
      enum:
        - success
        - notFound
        - badId
        - badName
        - badType
        - badPrice
        - cannotDelete
        - badSearchString
